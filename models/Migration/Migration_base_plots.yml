---
# ======================================================================================================================
#  ╦  ╦╔═╗╦═╗╦╔═╗╔╗ ╦  ╔═╗╔═╗
#  ╚╗╔╝╠═╣╠╦╝║╠═╣╠╩╗║  ║╣ ╚═╗
#   ╚╝ ╩ ╩╩╚═╩╩ ╩╚═╝╩═╝╚═╝╚═╝
# ======================================================================================================================
.variables:
  base_path:        &base_path    data/Migration

.meta_ops:
  dag_options:
    meta_operations:
      neg_exp:
        - mul: [!arg 0 , -1]
        - np.exp: [!dag_prev ]
      .isel_with_drop:
        - .isel: [!arg 0, !arg 1]
          kwargs: {drop: True}
      .sel_with_drop:
        - .sel: [!arg 0, !arg 1]
          kwargs: {drop: True}

      # Divide by median
      divide_by_median:
        - .median: [ !arg 0 , !arg 1 ]
        - div: [ !arg 0, !dag_prev ]

.default_style:
  dag_visualization:
    enabled: False
  dag_options:
    define: &colors

      # Make colors and page widths accessible across all plots
      c_yellow: '#F5DDA9'
      c_orange: '#EC9F7E'
      c_red: '#ec7070'
      c_pink: '#F8A6A6'
      c_purple: '#A07CB0'
      c_lightblue: '#97c3d0'
      c_darkblue: '#2F7194'
      c_lightgreen: '#AFD8BC'
      c_darkgreen: '#48675A'
      c_lightbrown: '#C6BFA2'
      c_lightgrey: '#AFC1B9'
      c_darkgrey: '#3D4244'

      # Set the page width of the document to allow for easy integration
      _page_width: 7.5

      # These are available for all plots and can be used to adjust the figure size or generate new sizes as needed
      full_width: !dag_tag _page_width
      half_width:
        - div: [!dag_tag _page_width, 2]
      third_width:
        - div: [!dag_tag _page_width, 3]
      quarter_width:
        - div: [!dag_tag _page_width, 4]
      fifth_width:
        - div: [!dag_tag _page_width, 5]
      two_thirds_width:
        - div: [!dag_tag _page_width, 3]
        - mul: [!dag_prev , 2]

  style:
    text.usetex:        True   # Set to 'True' to use latex
    mathtext.fontset:   cm
    font.family:        serif
    text.latex.preamble: \usepackage{amssymb} \usepackage{amsmath}

    # Set the label fontsize
    font.size:          &fontsize 9
    axes.titlesize:     *fontsize
    axes.labelsize:     *fontsize
    xtick.labelsize:    *fontsize
    ytick.labelsize:    *fontsize
    legend.fontsize:    *fontsize
    grid.linewidth:     0.5
    savefig.bbox:       tight
    axes.prop_cycle: !format
      fstr: "cycler('color', ['{colors[c_darkblue]:}',
                              '{colors[c_red]:}',
                              '{colors[c_darkgreen]:}',
                              '{colors[c_lightblue]:}',
                              '{colors[c_lightgreen]:}',
                              '{colors[c_lightbrown]:}',
                              '{colors[c_orange]:}',
                              '{colors[c_yellow]:}',
                              '{colors[c_darkgrey]:}',
                              '{colors[c_pink]:}',
                              '{colors[c_purple]:}',
                              '{colors[c_lightgrey]:}'
                              ])"
      colors:
        <<: *colors
    axes.grid:          True
    axes.spines.top:    False
    axes.spines.right:  False

  helpers:
    save_figure:
      dpi: 900
  file_ext: pdf

.cmap_BuYeGr:
  cmap:
    from_values:
      0: !dag_result c_darkblue
      0.5: !dag_result c_yellow
      1: !dag_result c_darkgreen
    continuous: True

.cmap_WhYeRe:
  cmap:
    from_values:
      0: white
      0.5: !dag_result c_yellow
      1: !dag_result c_red
    continuous: True

.cmap_YeOrRe:
  cmap:
    from_values:
      0: !dag_result c_yellow
      0.5: !dag_result c_orange
      1: !dag_result c_red
    continuous: True

.cmap_reds:
  cmap:
    from_values:
      0: !dag_result c_orange
      0.5: !dag_result c_red
      1: !dag_result c_purple
    continuous: True

.cmap_blues:
  cmap:
    from_values:
      0: !dag_result c_yellow
      0.5: !dag_result c_lightblue
      1: !dag_result c_darkblue
    continuous: True

.hlpr.no_labels:
  helpers:
    set_labels:
      x: ''
      y: ''

# ======================================================================================================================
#  ╔╦╗╔═╗╔╦╗╔═╗╦  ╔═╗╔╦╗╔═╗╔═╗
#   ║ ║╣ ║║║╠═╝║  ╠═╣ ║ ║╣ ╚═╗
#   ╩ ╚═╝╩ ╩╩  ╩═╝╩ ╩ ╩ ╚═╝╚═╝
# ======================================================================================================================
# -- Overloads ---------------------------------------------------------------------------------------------------------
# Overload some configs to insert model-specific settings
.creator.universe:
  based_on:
    - .creator.universe
    - .default_style
    - .meta_ops

  dag_options:
    select_path_prefix: *base_path

.creator.multiverse:
  based_on:
    - .creator.multiverse
    - .default_style
    - .meta_ops

  select_and_combine:
    base_path: *base_path

# Base function for probability densities
.plot.facet_grid.density:
  based_on: .plot.facet_grid
  kind: density

# Base function for barplots
.plot.facet_grid.bar:
  based_on: .plot.facet_grid
  kind: bar

# Matrix base config
.matrix:
  based_on:
    - .plot.facet_grid.pcolormesh
    - .hlpr.no_labels
    - .hlpr.ticks.x.hide
    - .hlpr.ticks.y.hide
    - .cmap_BuYeGr
  x: i
  y: j
  style:
    axes.grid: False
    axes.spines.top: True
    axes.spines.right: True
    axes.linewidth: 0.5
  helpers:
    set_limits:
      y: [ max, min ]
      x: [ min, max ]
# ======================================================================================================================
#  ╔═╗╦  ╔═╗╔╦╗╔═╗
#  ╠═╝║  ║ ║ ║ ╚═╗
#  ╩  ╩═╝╚═╝ ╩ ╚═╝
# ======================================================================================================================
# -- Plot of the training loss -----------------------------------------------------------------------------------------
loss:
  based_on:
    - .creator.universe
    - .plot.facet_grid.line
  select:
    data: loss
  hue: kind
  helpers:
    set_scales:
      y: log

loss_mv:
  based_on:
    - .creator.multiverse
    - .plot.facet_grid.line
  select_and_combine:
    fields:
      data: loss
  color: black
  hue: seed
  col: kind
  helpers:
    set_scales:
      y: log
    set_legend:
      use_legend: False

# Barplot of the N countries with the largest in- and outflows of migrants
net_migration:
  based_on:
    - .creator.universe
    - .plot.facet_grid.bar
    - .hlpr.no_labels
    - .cmap_blues
  dag_options:
    define:
      N: 20
  select:
    net_migration:
      path: net_migration
      transform:
        - .drop_sel: [!dag_prev , {i: Holy See}]
  transform:

    # Get the N countries with the largest in and outflows
    - .coords: [!dag_tag net_migration , i]
    - xr.Dataset:
        - x: !dag_prev
          y: !dag_tag net_migration
    - .sortby: [!dag_prev , 'y']
      tag: data_sorted
    - mul: [!dag_tag N, -1]
      tag: minus_N
    - np.arange: [!dag_tag minus_N , !dag_tag N, 1]
    - list: [!dag_prev ]
    - .isel_with_drop: [!dag_tag data_sorted, {i: !dag_prev }]
    - .sortby: [!dag_prev , 'y']
      tag: largest_N

    # Split the dataset along the middle
    - np.arange: [!dag_tag minus_N, 0, 1]
      tag: minus_N_to_0
    - np.arange: [ 0, !dag_tag N, 1 ]
    - list: [!dag_prev ]
      tag: 0_to_N
    - sub: [!dag_tag N, 1]
    - np.arange: [!dag_prev , -1, -1 ]
      tag: N_to_0

    - .isel_with_drop: [!dag_tag largest_N , {i: !dag_tag minus_N_to_0}]
    - .assign_coords: [!dag_prev , {i: !dag_tag 0_to_N}]
      tag: in

    - .isel: [!dag_tag largest_N , {i: !dag_tag 0_to_N}]
    - .assign_coords: [!dag_prev , {i: !dag_tag N_to_0}]
    - getitem: [!dag_prev , 'y']
    - np.abs: [!dag_prev ]
    - setitem: [!dag_node -3, y, !dag_prev ]
    - .sortby: [!dag_prev , 'y']
      tag: out

    - concat_along: [[!dag_tag in, !dag_tag out], 'type', ['Inflow', 'Outflow']]
      tag: data

    - getitem: [!dag_tag in , 'x']
    - .data: [!dag_prev ]
    - list: [!dag_prev ]
      tag: coords_in

    - getitem: [!dag_tag out , 'x']
    - .data: [!dag_prev ]
    - list: [!dag_prev ]
      tag: coords_out
  x: x
  y: y
  sharex: False
  hue: y
  col: type
  helpers:
    setup_figure:
      ncols: 2
      nrows: 1
    axis_specific:
      0:
        axis: [0, 0]
        set_ticks:
          x:
            major:
              locs: !dag_result 0_to_N
              labels: !dag_result coords_in
              rotation: 90
        set_title:
          title: Countries with largest inflow
        set_labels:
          y: 'Number of migrants (thousands)'
      1:
        axis: [1, 0]
        set_ticks:
          x:
            major:
              locs: !dag_result 0_to_N
              labels: !dag_result coords_out
              rotation: 90
        set_title:
          title: Countries with largest outflow

# Scatterplot of the discrepancy between the predicted and true marginal
discrepancy:
  based_on:
    - .creator.universe
    - .plot.facet_grid.scatter
  select:
    prediction:
      path: pred_net_migration
      transform:
        - .drop_sel: [ !dag_prev , { i: 'Holy See' } ]
    loss: loss
    true_data:
      path: net_migration
      transform:
        - .drop_sel: [ !dag_prev , { i: 'Holy See' } ]
  transform:
    - .isel_with_drop: [ !dag_tag prediction, { epoch: -1 } ]
    - sub: [ !dag_prev , !dag_tag true_data ]
    - xr.Dataset:
        - true_data: !dag_tag true_data
          prediction: !dag_node -2
          diff: !dag_prev
      tag: data

    # Plot a line through the origin
    - .to_array: [!dag_prev ]
    - .max: [!dag_prev ]
    - .min: [!dag_node -2]
    - np.linspace: [!dag_prev , !dag_node -2, 2 ]
      tag: line_data

  x: true_data
  y: prediction
  hue: diff
  cbar_kwargs:
    label: Prediction error
  cmap:
    from_values:
      0: !dag_result c_red
      0.25: !dag_result c_yellow
      0.5: !dag_result c_lightgreen
      0.75: !dag_result c_yellow
      1: !dag_result c_red
    continuous: true
  helpers:
    set_labels:
      x: True marginals $\boldsymbol{\mu}$
      y: Predicted marginals $\hat{\boldsymbol{\mu}}$
    call:
      functions:
        - function: [ matplotlib.pyplot, plot ]
          args: [ !dag_result line_data, !dag_result line_data ]
          lw: 1
          color: !dag_result c_lightgrey
          linestyle: 'dotted'
          zorder: -1

country_stats:
  based_on:
    - .creator.universe
    - .plot.facet_grid.bar
    - .cmap_blues
  dag_options:
    define:
      country: USA
  select:
    prediction:
      path: prediction
      transform:
        - .drop_sel: [!dag_prev , {i: Holy See, j: Holy See}]
    loss: loss
  transform:
    - .idxmin: [!dag_tag loss, 'epoch']
    - .sel_with_drop: [!dag_tag prediction, {epoch: !dag_prev } ]
      tag: pred

    # Get the outflow (country is source)
    - .sel_with_drop: [ !dag_tag pred , { i: !dag_tag country } ]
    - .coords: [!dag_prev , 'j']
    - xr.Dataset:
        - y: !dag_node -2
          x: !dag_prev
    - .sortby: [!dag_prev , 'y']
    - .isel: [!dag_prev , {j: !range [-20, 0]}]
    - .assign_coords: [!dag_prev , {j: !range [20]}]
      tag: out

    # Get the inflow (country is destination)
    - .sel_with_drop: [ !dag_tag pred , { j: !dag_tag country } ]
    - .coords: [!dag_prev , 'i']
    - xr.Dataset:
        - y: !dag_node -2
          x: !dag_prev
    - .sortby: [!dag_prev , 'y']
    - .isel: [!dag_prev , {i: !range [-20, 0]}]
    - .assign_coords: [!dag_prev , {i: !range [20]}]
    - .rename: [!dag_prev , {i: j}]
      tag: in

    - concat_along: [[!dag_tag in, !dag_tag out], 'type', ['Inflow', 'Outflow']]
      tag: data

    - getitem: [!dag_tag data , 'x']
    - .sel_with_drop: [!dag_prev , {type: 'Inflow'}]
    - .data: [!dag_prev ]
    - list: [!dag_prev ]
      tag: coords_in

    - getitem: [!dag_tag data , 'x']
    - .sel_with_drop: [!dag_prev , {type: 'Outflow'}]
    - .data: [!dag_prev ]
    - list: [!dag_prev ]
      tag: coords_out

    - .format: ["{} (Inflow)", !dag_tag country]
      tag: title_in
    - .format: ["{} (Outflow)", !dag_tag country]
      tag: title_out
  x: j
  y: y
  hue: y
  col: type
  sharex: False
  sharey: True
  helpers:
    setup_figure:
      nrows: 1
      ncols: 2
    set_labels:
      y: ''
      x: ''
    axis_specific:
      0:
        axis: [0, 0]
        set_ticks:
          x:
            major:
              locs: !range [20]
              labels: !dag_result coords_in
              rotation: 90
              fontsize: 9
        set_title:
          title: !dag_result title_in
      1:
        axis: [1, 0 ]
        set_ticks:
          x:
            major:
              locs: !range [20]
              labels: !dag_result coords_out
              rotation: 90
              fontsize: 9
        set_title:
          title: !dag_result title_out